stages:
    - image
    - analysis
    - test
    - coverage

########################################################################################################################
# Docker
.image: &image
    stage: image
    before_script:
        - docker info
    script:
        # Login to GitLab container registry https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-the-gitlab-container-registry
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
        # Build image using Docker caching, see https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#making-docker-in-docker-builds-faster-with-docker-layer-caching
        - docker pull "$IMAGE_TAG" || true
        - docker build --cache-from "$IMAGE_TAG" -t "$IMAGE_TAG" "docker/$IMAGE_NAME"
        - docker push "$IMAGE_TAG"
    tags:
        - dind

image:ubuntu:xenial:
    <<: *image
    variables:
        IMAGE_NAME: ubuntu:xenial
        IMAGE_TAG: $CI_REGISTRY_IMAGE/$IMAGE_NAME

image:ubuntu:bionic:
    <<: *image
    variables:
        IMAGE_NAME: ubuntu:bionic
        IMAGE_TAG: $CI_REGISTRY_IMAGE/$IMAGE_NAME

image:ubuntu:npm:
    <<: *image
    variables:
        IMAGE_NAME: ubuntu:npm
        IMAGE_TAG: $CI_REGISTRY_IMAGE/$IMAGE_NAME

########################################################################################################################
# Basic declarations
.ubuntu-xenial: &ubuntu-xenial
    image: "$CI_REGISTRY/$CI_PROJECT_PATH/ubuntu:xenial"

.ubuntu-bionic: &ubuntu-bionic
    image: "$CI_REGISTRY/$CI_PROJECT_PATH/ubuntu:bionic"

.ubuntu-npm: &ubuntu-npm
    image: "$CI_REGISTRY/$CI_PROJECT_PATH/ubuntu:npm"

.test: &test
    script:
        - tox

########################################################################################################################
# Individual jobs
licensing:
    <<: *ubuntu-bionic
    stage: analysis
    before_script:
        # Set up SSH key for access to gitlab repositories
        - install -m 700 -d $HOME/.ssh
        - install -m 600 $SRC_DIR/{id_rsa,id_rsa.pub,known_hosts} $HOME/.ssh/
        # Clone the licence check
        - git clone git@gitlab.office.nic.cz:internal-tools/license-check.git --single-branch --depth 1
    script:
        - ./license-check/license-check.sh -v
    variables:
        SRC_DIR: /usr/local/env

depcheck:
    <<: *ubuntu-bionic
    stage: analysis
    only:
        - schedules
    script:
        - git clone https://gitlab.office.nic.cz/vzima/ci-tools.git --depth=1
        # Install package with testing dependencies to verify versions
        - pip3 install .[testing]
        - python3 ./ci-tools/check-constraints.py constraints.txt
    allow_failure: true

test:xenial:
    <<: *test
    <<: *ubuntu-xenial

test:bionic:
    <<: *test
    <<: *ubuntu-bionic

test-thawed:
    <<: *test
    <<: *ubuntu-bionic
    only:
        - schedules
    script:
        - tox -e thaw

css:
    <<: *ubuntu-npm
    stage: analysis
    before_script:
        - npm install
        - npm list || true
    script:
        - npm run check-css

eslint:
    <<: *ubuntu-npm
    stage: analysis
    before_script:
        - npm install eslint eslint-plugin-jest
        - npm list || true
    script:
        - npm run check

test-js:
    <<: *ubuntu-npm
    stage: test
    before_script:
        - npm install
        - npm list || true
    script:
        - npm run test
    artifacts:
        expire_in: 1d
        paths:
            - coverage-js/

coverage-report-js:
    <<: *ubuntu-bionic
    stage: coverage
    script:
        - report-json-coverage coverage-js/coverage-summary.json
